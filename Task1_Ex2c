function [root,dif,n,rec] = Mod_Newton(f, df, x0, TolX, TolY, MaxIter, varargin)
    
    % Input:
    % f: function to solve
    % df: derivative of f
    % x0: initial condition
    % TolX: x-axis tolerance
    % TolY: y-axis tolerance
    % MaxIter: Max number of iterations
    % varargin: parameter values
    
    % Output:
    % root: a root of f (p such that f(p)=0)
    % dif: difference between succesive values of the recurrence 
    % n: number of iterations completed
    % rec: array with the values of the recurrence
    
    % Variable Check
    if nargin<3, error('at least 3 input arguments required (f,df and x0)'), end
    if nargin<4 || isempty(TolX), TolX=10^(-4); end
    if nargin<5 || isempty(TolY), TolY=10^(-4); end
    if nargin<6 || isempty(MaxIter), MaxIter = 100; end
    
    % Initializing the array at 0
    rec = zeros(1,MaxIter);
    
    % Initializing the error and the value of the function at 100
    dif = 100;
    fval = 100;
    
    % Computing the recurrence
    n = 1;
    rec(n) = x0;
    
    while n <= MaxIter & (dif >= TolX || fval >= TolY)
        fval=f(rec(n),varargin{:});
        dfval=df(rec(n),varargin{:});
       
        rec(n+1)=rec(n)-(fval/dfval);
        dif=abs(rec(n+1)-rec(n));
        fval=f(rec(n+1));
        
        %fprintf('rec(%d) = %.16f \n', n, rec(n))
        %fprintf('rec(%d) = %.16f \n', n+1, rec(n+1))
        %fprintf('dif = %.16f \n', dif)
        %fprintf('f(rec(n+1))= %.16f \n\n', fval)
        n=n+1;
    end
    root = rec(n); % value of the root
    n = n-1; % number of iterations
    