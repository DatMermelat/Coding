clear
% Load the image

 I = imread('landscape.png');

% Define the scaling factor (number of times interpolation is performed)
scale_factor = 1;

% Interpolation Degree
n = 1;

% Defining arrays for the Lagrange Pol. inputs
Xin=zeros(1,n+1);
Yin=zeros(1,n+1);

% Get the size of the original image
[rows,cols,~] = size(I);

new_rows=rows;
new_cols=cols;
% f = double(I(:,:,1));
f = im2gray(I);
for iterations=1:scale_factor
    if iterations > 1
        clear f;
        cols = new_cols;
        rows = new_rows;
        f    = new_image;
        clear new_image;
    end
    %New image size
    new_rows=2*new_rows-1;
    new_cols=2*new_cols-1;
    new_image = zeros(new_rows,new_cols);

    for i=1:rows-n
        for j=1:cols-n
           % Getting the nodes 
           for k=0:n
               Xin(k+1)=j+k;
           end
           for k=0:n
               Yin(k+1)=i+k;
           end
           
           % Getting Lagrange coefficient polynomials
           Lx=Gen_Lagrange_Pol_x(Xin);
           Ly=Gen_Lagrange_Pol_y(Yin);
           
           
           p = @(x,y) 0;
           for k=0:n
               for l=0:n
                   p = @ (x,y) p(x,y) + Ly{k+1}(y).*Lx{l+1}(x).*f(i+k,j+l);
               end
           end
           
           for u=i:0.5:i+0.5
               for v=j:0.5:j+0.5
                   new_image(2*u-1,2*v-1)= p(v,u);
                   if v==cols-n
                       for k=n:-1:1
                           new_image(2*u-1,2*cols-k)= p(cols-k+1,u);
                       end
                   end
                   if u == rows-n
                       for k=n:-1:1
                           new_image(2*rows-k,2*v-1)=p(v,rows-k+1);
                       end
                   end
               end
           end
        end
    end
end

new_image = uint8(new_image);

% Show the original and interpolated images side by side
figure
subplot(1,2,1); imshow(I); title('Original Image');
subplot(1,2,2); imshow(new_image); title('Interpolated Image');
